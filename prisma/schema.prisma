// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  RECRUITER
  USER
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id          Int      @id @default(autoincrement())
  username    String
  email       String   @unique
  password    String
  role        Role     @default(USER)
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  applications Application[]
  offers       Offer[]       @relation("RecruiterOffers")
  skills       Skill[]       @relation("UserSkills")

  @@map("user") 

}

model Offer {
  id            Int          @id @default(autoincrement())
  title         String
  description   String       @db.Text
  company_name  String
  salary        Int
  location      Location     @relation(fields: [location_id], references: [id], onDelete: Cascade)
  location_id   Int
  contract_type String
  recruiter     User         @relation("RecruiterOffers", fields: [recruiter_id], references: [id])
  recruiter_id  Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  skills        Skill[]      @relation("OfferSkills")
  applications  Application[]
  @@index([location_id])
  @@index([recruiter_id])

  @@map("offer") 
}

model Application {
  id         Int       @id @default(autoincrement())
  content    String    @db.Text
  firstname  String
  lastname   String
  email      String
  offer      Offer     @relation(fields: [offer_id], references: [id], onDelete: Cascade)
  offer_id   Int
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  cv         String

  status     Status    @default(PENDING)
  feedback   String?   @db.Text
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  @@index([offer_id])
  @@index([user_id])

  @@map("application") 
}

model Location {
  id          Int       @id @default(autoincrement())
  city        String
  country     String    @default("France")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  offers      Offer[]

  @@map("location") 

}

model Skill {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  level      Int?    
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  users      User[]    @relation("UserSkills")
  offers     Offer[]   @relation("OfferSkills")

  @@map("skill") 
}